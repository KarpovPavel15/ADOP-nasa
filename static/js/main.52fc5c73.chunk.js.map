{"version":3,"sources":["store/reducer.js","modules/day/reducer/reducer.js","utils/utils.js","modules/day/actions/action.js","modules/day/saga/saga.js","store/store.js","modules/day/component/day.jsx","modules/day/dayContainer.jsx","modules/rootPage/component/rootPage.jsx","modules/rootPage/rootPageContainer.jsx","rootRoute/router.jsx","App.js","index.js"],"names":["combineReducers","dayInfo","state","action","type","actionCreator","payload","actionTypeCreator","actionStatus","actionType","getSelectedDayInfoRequest","getSelectedDayInfoSuccess","successCreator","getDayContent","calendarSaga","fetchDataOnDay","day","axios","currentDay","call","result","put","data","all","takeLatest","sagas","store","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","composeWithDevTools","applyMiddleware","forEach","saga","run","configureStore","Day","returnToCalendar","className","onClick","event","copyright","explanation","hdurl","src","alt","undefined","url","title","allowFullScreen","DayContainer","match","useSelector","dispatch","useDispatch","history","useHistory","slice","month","year","useEffect","push","RootPage","Calendar","showNeighboringMonth","onClickDay","getFullYear","getMonth","getDate","clickDay","prev2Label","next2Label","maxDate","Date","minDate","RootPageContainer","RootRoute","exact","path","component","App","customHistory","createBrowserHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52fc5c73.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { reducerDay } from '../modules/day/reducer';\r\n\r\nexport default combineReducers({\r\n    dayInfo: reducerDay\r\n});\r\n","export const reducerDay = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'GET__SELECTED__DAY__INFO__SUCCESS' :\r\n            return {...action.dayInfo};\r\n        default :\r\n            return state\r\n    }\r\n};\r\n","export const actionCreator = type => (payload = {}) => ({\r\n    type,\r\n    ...payload\r\n});\r\n\r\nconst actionTypeCreator = (actionStatus, actionType) => `${actionType}__${actionStatus}`;\r\n\r\nexport const requestCreator = actionType => actionTypeCreator('REQUEST', actionType);\r\nexport const successCreator = actionType => actionTypeCreator('SUCCESS', actionType);\r\n","import { actionCreator, requestCreator, successCreator } from '../../../utils';\r\n\r\nexport const getSelectedDayInfo = 'GET__SELECTED__DAY__INFO';\r\nexport const getSelectedDayInfoRequest = actionCreator(requestCreator(getSelectedDayInfo));\r\nexport const getSelectedDayInfoSuccess = actionCreator(successCreator(getSelectedDayInfo));\r\n\r\n\r\n","import { all, call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { getSelectedDayInfoSuccess } from \"../actions\";\r\nimport * as axios from \"axios\";\r\n\r\nconst fetchDataOnDay = day => axios.get(`https://api.nasa.gov/planetary/apod?api_key=f349WgzxLaFtNpgVjCHqkge0tiid36Wm4C6N5N7c&date=${day}`);\r\n\r\nfunction* getDayContent({currentDay}) {\r\n    const result = yield call(fetchDataOnDay, currentDay);\r\n    yield put(getSelectedDayInfoSuccess({\r\n        dayInfo: {...result.data}\r\n    }));\r\n}\r\n\r\nexport function* calendarSaga() {\r\n    yield all([\r\n        takeLatest('GET__SELECTED__DAY__INFO__REQUEST', getDayContent),\r\n    ]);\r\n}\r\n","import { applyMiddleware, createStore  } from 'redux';\r\nimport rootReducer from './reducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { calendarSaga } from '../modules/day/saga';\r\n\r\nconst sagas = [\r\n    calendarSaga\r\n];\r\n\r\nexport const configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n    sagas.forEach(saga => sagaMiddleware.run(saga));\r\n    return store;\r\n};\r\n\r\nexport const store = configureStore();\r\n","import './day.scss'\r\nimport React from 'react'\r\n\r\nexport const Day = ({returnToCalendar, currentDay, dayInfo}) => {\r\n    return (\r\n        <div className=\"day\">\r\n            <button onClick={event => returnToCalendar(event)}>Return to calendar</button>\r\n            <p>Day: {currentDay}</p>\r\n            <p>Copyright: {dayInfo.copyright}</p>\r\n            <p>Explanation: {dayInfo.explanation}</p>\r\n            {\r\n                dayInfo.hdurl && <img className=\"day__picture\" src={dayInfo.hdurl} alt=\"day\"/>\r\n            }\r\n            {dayInfo.hdurl === undefined && dayInfo.url &&\r\n            <div className=\"day__video video\">\r\n                <iframe title=\"video\" className=\"video__iframe\" allowFullScreen={true} src={dayInfo.url}>\r\n                </iframe>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n","import React, { useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getSelectedDayInfoRequest } from './actions';\r\nimport { Day } from './component';\r\n\r\n\r\nexport const DayContainer = ({match}) => {\r\n    const {dayInfo} = useSelector(store => store);\r\n    const dispatch = useDispatch();\r\n    let history = useHistory();\r\n    let currentDay = match.url.slice(1, 13);\r\n    let month = currentDay.slice(5, 6);\r\n    let year = currentDay.slice(0, 4);\r\n    let day = currentDay.slice(7, 9);\r\n    currentDay = `${year}-${month}-${day}`;\r\n\r\n\r\n    useEffect(() => {\r\n        dayInfo && dispatch(getSelectedDayInfoRequest({currentDay}))\r\n    }, []);\r\n\r\n    const returnToCalendar = () => {\r\n        history.push('./')\r\n    };\r\n\r\n    return (\r\n        <Day returnToCalendar={returnToCalendar} dayInfo={dayInfo} currentDay={currentDay}/>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport \"./root-page.scss\";\r\nimport { Calendar } from \"react-calendar\";\r\n\r\nexport const RootPage = ({history}) => {\r\n\r\n    const clickDay = event => history.push(`/${event.getFullYear()}-${event.getMonth()+1}-${event.getDate()}`);\r\n\r\n    return (\r\n        <div className=\"root-page\">\r\n            <Calendar\r\n                showNeighboringMonth={false}\r\n                onClickDay={event => clickDay(event)}\r\n                prev2Label={null} next2Label={null} maxDate={(new Date(2020, 11, 31))}\r\n                minDate={(new Date(2020, 0, 1))}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { RootPage } from './component';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const RootPageContainer = () => {\r\n    const history = useHistory();\r\n\r\n    return <RootPage history={history}/>;\r\n};\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport { RootPageContainer } from '../modules';\r\nimport { DayContainer } from '../modules/day';\r\n\r\nexport const RootRoute = () => (\r\n    <main>\r\n        <Switch>\r\n            <Route exact path='/' component={RootPageContainer}/>\r\n            <Route exact path='/ADOP-nasa/' component={RootPageContainer}/>\r\n            <Route path='/:day' component={DayContainer}/>\r\n            <Route path='/ADOP-nasa/:day' component={DayContainer}/>\r\n        </Switch>\r\n    </main>\r\n);\r\n","import React from 'react';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\nimport { RootRoute } from './rootRoute';\r\n\r\nexport default function App () {\r\n    const customHistory = createBrowserHistory();\r\n    return (\r\n        <Provider store={store}>\r\n            <Router history={customHistory}>\r\n                <RootRoute/>\r\n            </Router>\r\n        </Provider>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root'));\r\n"],"sourceRoot":""}